eat_trace("eat_fs_Open():Create File Fail,and Return Error is %x ",testFileHandle);
eat_trace("eat_fs_Open():Create File Success,and FileHandle is %x ",testFileHandle);
eat_trace("eat_fs_GetFileSize():Get File Size Fail,and Return Error is %d",fs_op_ret);
eat_trace("eat_fs_GetFileSize():Get File Size Success and File Size id %d",filesize);
eat_trace("erase flash addr=%x len=%x", addr,  filesize); 
eat_trace("Erase flash failed [0x%08x, %dKByte]", addr,  filesize/1024);
eat_trace("need to read file %d",read_count);
eat_trace("mem alloc fail!");
eat_trace("eat_fs_Read():Read File Fail,and Return Error is %d,Readlen is %d",fs_op_ret,app_datalen);
eat_trace("eat_fs_Read():Read File Success");
eat_trace("START: write flash[0x%x, %dKByte]", APP_DATA_STORAGE_BASE, app_datalen/1024);
eat_trace("write flash time=%d",t2);
eat_trace("Write flash failed [0x%08x, %dKByte]", addr, app_datalen/1024);
eat_trace("All use %d write[%d, %d]", c_write, t_erase, t_write);
eat_trace("Test App Over");
eat_trace("Create LOG File Fail,and Return Error is %d", log_file);
eat_trace("eat_fs_Write():Write LOG File Fail,and Return Error is %d", ret);
eat_trace("Create File Fail,and Return Error is %d", FileHandle);
eat_trace("mem alloc fail!");
eat_trace("eat_fs_Write():Write File Fail,and Return Error is %d", ret);
eat_trace("Settings save Ok");
eat_trace("Open File Fail,and Return Error is %d", FileHandle);
eat_trace("mem alloc fail!");
eat_trace("eat_fs_Read():Read File Fail,and Return Error is %d,Readlen is %d", ret, readLen);
eat_trace("Settings load Ok");
eat_trace("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", ExIP[0][0], ExIP[0][1], ExIP[0][2], ExIP[0][3], ExIP[1][0], ExIP[1][1], ExIP[1][2], ExIP[1][3], ExIP[2][0], ExIP[2][1], ExIP[2][2], ExIP[2][3], Period1, Period2, prm_per, gsmloc_per, money_per, trip_per, debug_per, can1_per, can2_per, ADC_per, INx_per, freq_per, ident_per, offsim_per, Send_per1, Send_per2, Stealth_ontm, Stealth_per, Vbt_off, Settings, Settings1);
eat_trace("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s", ExPort[0], ExPort[1], ExPort[2], Speed_lim, Vcc_lim, Vbt_lim, Period3, Rsindp, Sync, PortPr, APN, APN_user, APN_pass, SMS_pass, Num1, Num2, Num3, Num4, Num5, NumAd1, NumAd2, MoneyUSSD);
eat_trace("Create File Fail,and Return Error is %d", FileHandle);
eat_trace("mem alloc fail!");
eat_trace("eat_fs_Write():Write File Fail,and Return Error is %d", ret);
eat_trace("Status save Ok");
eat_trace("Open File Fail,and Return Error is %d", FileHandle);
eat_trace("mem alloc fail!");
eat_trace("eat_fs_Read():Read File Fail,and Return Error is %d,Readlen is %d", ret, readLen);
eat_trace("Status load Ok");
eat_trace("%u", eng_block);
eat_trace("eat_sms_delete_cb, result=%d", result);
eat_trace("eat_sms_read_cb, msg=%s", smsReadCnfContent.data);
eat_trace("eat_sms_read_cb, number=%s", smsReadCnfContent.number);
eat_trace("FTP_path:%s", FTP_path);
eat_trace(FTP_path);
eat_trace("buf_pos:%s", buf_pos);
eat_trace("eat_sms_ready_cb, result=%d", result);
eat_trace("eat_sms_new_message_cb, storage=%d,index=%d", smsNewMessage.storage, smsNewMessage.index);
eat_trace("eat_sms_send_cb, result=%d", result);
eat_trace("eeprom_p1:%d,eeprom_p2:%d,out_buf_col:%d", eeprom_p1, eeprom_p2, out_buf_col);
eat_trace("Send AT: %s", at_cmd);
eat_trace("eat_soc_recv:%d, %s", len, server_answer);
eat_trace("C0 find");
eat_trace("%u.%u.%u.%u,%u.%u.%u.%u,%u.%u.%u.%u,%u,%u,%u,%s,%s,%s,%u", ExIP[0][0], ExIP[0][1], ExIP[0][2], ExIP[0][3], ExIP[1][0], ExIP[1][1], ExIP[1][2], ExIP[1][3], ExIP[2][0], ExIP[2][1], ExIP[2][2], ExIP[2][3], ExPort[0], ExPort[1], ExPort[2], APN, APN_user, APN_pass, PortPr);
eat_trace("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", Period1, Period2, Send_per1, Send_per2, Settings, Settings1, Stealth_per, Stealth_ontm, Period3, Rsindp, Sync);
eat_trace("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", prm_per, gsmloc_per, money_per, trip_per, debug_per, can1_per, can2_per, ADC_per, INx_per, freq_per, ident_per, offsim_per);
eat_trace("%u,%s,%s,%u,%u,%u", Vbt_off, SMS_pass, MoneyUSSD, Speed_lim, Vcc_lim, Vbt_lim);
eat_trace("%s,%s,%s,%s,%s,%s,%s", NumAd1, NumAd2, Num1, Num2, Num3, Num4, Num5);
eat_trace("eng_block:%u", eng_block);
eat_trace("do_req:%d", do_req);
eat_trace("reindent=1");
eat_trace("FTP_path:%s", FTP_path);
eat_trace(FTP_path);
eat_trace("buf_pos:%s", buf_pos);
eat_trace("%u.%u.%u.%u,%s,%s,%s", FTP_server[0], FTP_server[1], FTP_server[2], FTP_server[3], FTP_user, FTP_pass, FTP_path);
eat_trace("SOC_NOTIFY:%d,%s,%d\r\n",s,SOC_EVENT[id], ack_size);
eat_trace("SOC_NOTIFY:%d,%s,%d\r\n",s,SOC_EVENT[id], result);
eat_trace(tmp_buf);
eat_trace("eat_soc_create return error :%d", server_soc);
eat_trace("socket id :%d", server_soc);
eat_trace("eat_soc_setsockopt 2 return error :%d",ret);
eat_trace("eat_soc_setsockopt 1 return error :%d", ret);
eat_trace(tmp_buf);
eat_trace(" app_main ENTRY");
eat_trace("ERROR: eat memory initial error!");
eat_trace("[%s] uart(%d) set config good!", __FUNCTION__, MCU_UART);
eat_trace("[%s] uart(%d) set config fail!", __FUNCTION__, MCU_UART);
eat_trace("App Main ENTRY update:%d result:%d", app_para.is_update_app,app_para.update_app_result);
eat_trace("[%s] uart(%d) open fail!", __FUNCTION__, MCU_UART);
eat_trace("MSG id%x", event.event);
eat_trace("Messege to User0");
eat_trace("From Mdm:%s", input_buf);
eat_trace("at_ret:%s", at_ret);
eat_trace("ICC:%c%c%c%c%c%c;", ICC[0], ICC[1], ICC[2], ICC[3], ICC[4], ICC[5]);
write_log("Incoming call");
eat_trace(incall_nbr);
eat_trace("From GPS_UART:%s", input_buf);
eat_trace("From RS485_UART:%s", input_buf);
eat_trace("From CAN_UART:%s", input_buf);
eat_trace("Vibration detected");
eat_trace("Send SMS to Nbr1");
eat_trace("Send SMS to Nbr2");
eat_trace("Send SMS to Nbr3");
eat_trace("Send SMS to Nbr4");
eat_trace("Send SMS to Nbr5");
sprintf(tmp_buf, "eat_gprs_bearer_release:%d", ret);
eat_trace(tmp_buf);
write_log(tmp_buf);
eat_trace("UDP send IMEI");
eat_trace("%u,%u,%u,%u,%u;", main_buf[eeprom_p2], main_buf[eeprom_p2+1], main_buf[eeprom_p2+2], main_buf[eeprom_p2+3], main_buf[eeprom_p2+4]);
eat_trace("UDP send data");
eat_trace("main_status:%u;cfun:%u;cpin%u;gsm_reg:%u;cgatt:%u;bear_st:%u;send_cnt=%u;senderr_cnt:%u;gprs_st:%u;", main_status, cfun, cpin, gsm_reg, cgatt, bear_st, send_cnt, senderr_cnt, gprs_st);
eat_trace("ver:%u;main_st:%u;extoff_time=%u;MCU_ver:%u;MCU_inputs:%u;out_buf_col:%u;gprs_st_timer:%u;s_st:%u;", Version, main_st, extoff_time, MCU_ver, MCU_inputs, out_buf_col, gprs_st_timer, s_st);
eat_trace("stealth_timer:%u;stealth_cnt:%u;udpsend_st:%u;SatUs:%u;own_ip:%hhu.%hhu.%hhu.%hhu;", stealth_timer, stealth_cnt, udpsend_st, (SatUs >> 6)), own_ip[0], own_ip[1], own_ip[2], own_ip[3];
eat_trace("%2.2u/%2.2u/%2.2u %2.2u:%2.2u:%2.2u;lat=%2.5f&lon=%3.5f&spd=%u&dir=%u;gprs_enable:%u;send_sms_st:%u;", Day, Month, Year, Hour, Minute, Second, (double)Latitude / 100000, (double)Longitude / 100000, Speed, Course, gprs_enable, send_sms_st);
eat_trace("gprs_st_errcnt:%u;gprs_st_timer:%u;ExIPN:%u;", gprs_st_errcnt, gprs_st_timer, ExIPN);
eat_trace("fr1:%u;fr1:%u", freq1, freq2);
eat_trace("TIMER3");
eat_trace("test_handler_int_level interrupt->pin [%d ],interrupt->level=%d",event.data.interrupt.pin,event.data.interrupt.level);
eat_trace(sms_txt);
eat_trace("MCC:%u,MNC:%u,Cellid:%u,Lac:%u", MCC, MNC, CID, LAC);
eat_trace("Download done");
eat_trace("Money:%u;", Money);
eat_trace("MCC:%u,MNC:%u,Cellid:%u,Lac:%u", MCC, MNC, CID, LAC);
